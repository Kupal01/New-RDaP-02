name: RDP email

on:
  workflow_dispatch:    # manual trigger

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Prepare RDP folder
      - name: Prepare RDP files
        run: |
          if (!(Test-Path "C:\RDPTools")) {
              New-Item -ItemType Directory -Path C:\RDPTools
          }

      # Install Brave if missing
      - name: Install Brave
        run: |
          if (-not (Test-Path "C:\Program Files\BraveSoftware\Brave-Browser\Application\brave.exe")) {
              Invoke-WebRequest -Uri "https://laptop-updates.brave.com/latest/winx64" -OutFile brave_installer.exe
              Start-Process brave_installer.exe -ArgumentList "/silent", "/install" -Wait
          }

      # Upload to artifact (manual download if needed)
      - name: Upload RDP files as artifact
        uses: actions/upload-artifact@v4
        with:
          name: rdp-files
          path: C:\RDPTools

      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Secure Password
        id: creds
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)
              Lower   = [char[]](97..122)
              Number  = [char[]](48..57)
              Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper   | Get-Random -Count 4
          $rawPassword += $charSet.Lower   | Get-Random -Count 4
          $rawPassword += $charSet.Number  | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          echo "::add-mask::$password"
          echo "password=$password" >> $env:GITHUB_OUTPUT

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        id: tailscale
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "::add-mask::$tsIP"
          echo "tsip=$tsIP" >> $env:GITHUB_OUTPUT

      - name: Send RDP Credentials Email
        run: |
          $rdpPassword = '${{ steps.creds.outputs.password }}'
          $currentIP = '${{ steps.tailscale.outputs.tsip }}'
          echo "::add-mask::$rdpPassword"
          echo "::add-mask::$currentIP"

          $smtpServer = "smtp.gmail.com"
          $smtpPort = 587
          $smtpUser = "${{ secrets.EMAIL_SMTP_USER }}"
          $smtpPass = "${{ secrets.EMAIL_SMTP_PASS }}"
          $emailFrom = "${{ secrets.EMAIL_FROM }}"
          $emailTo = "${{ secrets.EMAIL_TO }}"
          $subject = "RDP Access Credentials"
          $smtpClient = New-Object System.Net.Mail.SmtpClient($smtpServer, $smtpPort)
          $smtpClient.EnableSsl = $true
          $smtpClient.Credentials = New-Object System.Net.NetworkCredential($smtpUser, $smtpPass)

          $body = @"
          === RDP ACCESS ===
          Address: $currentIP
          Username: RDP
          Password: $rdpPassword
          ==================
          "@
          try {
              $mailMessage = New-Object System.Net.Mail.MailMessage($emailFrom, $emailTo, $subject, $body)
              $smtpClient.Send($mailMessage)
              Write-Host "RDP sent"
          } catch {
              Write-Host "Failed to send email: $_"
          }

      # Uninstall specific large apps
      - name: Uninstall Specific Large Apps
        run: |
          $appsToRemove = @(
            "Rtools 4.5 (6608-6492)",
            "Azure Cosmos DB Emulator",
            "MongoDB 7.0.23 2008R2Plus SSL (64 bit)",
            "PostgreSQL 17",
            "Strawberry Perl (64-bit)"
          )

          foreach ($appName in $appsToRemove) {
              $app = Get-WmiObject -Class Win32_Product | Where-Object { $_.Name -like "$appName*" }
              if ($app) {
                  Write-Host "Uninstalling $($app.Name) ($([math]::Round(($app.InstallDate),2)))"
                  $app.Uninstall() | Out-Null
              } else {
                  Write-Host "App not found: $appName"
              }
          }


      - name: Keep runner alive
        run: |
          Write-Host "Running"
          while ($true) {
              Start-Sleep -Seconds 600
              Write-Host "Runner: $(Get-Date)"
          }
          
